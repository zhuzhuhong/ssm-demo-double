<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--声明开启注解,指定扫描注解的路径-->
    <context:component-scan base-package="com.bdqn"/>
    <context:annotation-config/>


    <!--将被引用的实体类纳入到Spring的管理中-->
    <!--<bean id="smbmsRole" class="com.bdqn.SmbmsRole">-->
    <!--&lt;!&ndash;通过构造注入相关属性&ndash;&gt;-->
    <!--&lt;!&ndash;<constructor-arg name="roleCode" value="Manager"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<constructor-arg name="roleName" value="经理"/>&ndash;&gt;-->
    <!--<constructor-arg index="0" value="3" />-->
    <!--<constructor-arg index="1" value="Admin"/>-->
    <!--<constructor-arg index="2" value="管理"/>-->
    <!--&lt;!&ndash;通过set注入相关属性&ndash;&gt;-->
    <!--&lt;!&ndash;<property name="roleCode" value="Admin"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<property name="roleName" value="管理员"/>&ndash;&gt;-->

    <!--&lt;!&ndash;<constructor-arg name="creationDate" value="new Date(2020-5-21)"/>&ndash;&gt;-->
    <!--</bean>-->

    <!--将实体类纳入到Spring的管理中-->
    <!--<bean id="customerUser" class="com.bdqn.CustomUser">-->
    <!--&lt;!&ndash;注入 所依赖的值 或实体&ndash;&gt;-->
    <!--<property name="name" value="ETC"/>-->
    <!--<property name="smbmsRole" ref="smbmsRole"/>-->
    <!--</bean>-->

    <!--将目标方法，也就是需要被增强的方法纳入到Spring的管理中-->
    <!--<bean id="userService" class="com.bdqn.service.SmbmsUserService"/>-->

    <!--先将增强方法所在的类，纳入Spring的管理中-->
    <bean id="logAspect" class="com.bdqn.aspect.LogAspect"/>

    <!--配置数据源-->
    <bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
        <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
        <!--数据库连接地址，如果在数据库服务器没有配置编码和时区，则需要在路径后面添加相应的配置-->
        <property name="url" value="jdbc:mysql://localhost:3306/smbms_db"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <!--MyBatis相关属性配置，相当于单独使用MyBatis时的<setting标签>-->
    <bean id="config" class="org.apache.ibatis.session.Configuration">
        <!--开启驼峰命名自动映射 ，也就是将数据库中的下划线转换成为Java中的驼峰命名法-->
        <property name="mapUnderscoreToCamelCase" value="true"/>
        <!--指定日志的实现，一般用于打印sql语句-->
        <property name="logImpl" value="org.apache.ibatis.logging.log4j2.Log4j2Impl"/>
    </bean>

    <!--配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--引入MyBatis配置文件-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--引入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定mapper映射文件所在的位置-->
        <property name="mapperLocations" value="classpath:com/bdqn/**/*.xml"/>
        <!--引入自定义配置-->
        <property name="configuration" ref="config"/>
    </bean>

    <!--通过扫描的方式将Mapper纳入Spring的管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--引入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定dao层接口所在的路径-->
        <property name="basePackage" value="com.bdqn"/>

    </bean>

    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定需要事务管理的数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务规则-->
    <tx:advice transaction-manager="txManager" id="txAdvice">
        <tx:attributes>
            <!--针对不同的方法，执行不同的事务规则 ，一般会使用通配符-->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!--开始配置切面 -->
    <aop:config>
        <!--指定切入点，也就是要增强的位置-->
        <!--com.bdqn.service.SmbmsUserService; com.bdqn.service.impl.SmbmsRoleServiceImpl-->
        <aop:pointcut id="pointcut" expression="execution(public * com.bdqn.service..*.*(..))"/>
        <!--指定事务切入点-->
        <aop:pointcut id="txPointcut" expression="execution(public * com.bdqn.service..*.*(..))"/>
        <!--指定增强类型-->
        <aop:aspect ref="logAspect">
            <!--前置增强，同时指定前置所调用的方法-->
            <!--<aop:before method="beforeAdvice" pointcut-ref="pointcut"/>-->
            <!--&lt;!&ndash;后置返回增强，可以获取到目标方法的返回值 &ndash;&gt;-->
            <!--<aop:after-returning method="afterAdevice" returning="result" pointcut-ref="pointcut"/>-->
            <!--异常抛出增强-->
            <!--<aop:after-throwing method="afterThrowAdevice" throwing="e" pointcut-ref="pointcut" />-->
            <!--后置增强，也就是最终增强，就是无伦目标方法发生什么，都会最后执行-->
            <!--<aop:after method="finallyAdevice" pointcut-ref="pointcut" />-->
            <!--环绕增强，目标方法前后都会执行-->
            <aop:around method="aroudAdevice" pointcut-ref="pointcut"/>
        </aop:aspect>
    </aop:config>

    <!--配置事务-->
    <aop:config>
        <!--将事务管理器与切入点结合，也就将两者织入-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>


</beans>
    
